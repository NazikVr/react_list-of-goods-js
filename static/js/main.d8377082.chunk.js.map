{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_NAME","SORT_FIELD_LENGTH","App","useState","option","reverse","sortOption","setSortOption","visibleGoods","goods","isReversed","sort","good1","good2","localeCompare","getVisbleGoods","reversed","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"wPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAkB,OAClBC,EAAoB,SA0BbC,EAAM,WACjB,MAAoCC,mBAAS,CAC3CC,OAAQ,GACRC,SAAS,IAFX,mBAAOC,EAAP,KAAmBC,EAAnB,KAKMC,EA9Be,SAACC,EAAOH,EAAYI,GACzC,IAAIF,EAAeC,EAoBnB,OAlBIH,IACFE,EAAe,YAAIA,GAAcG,MAAK,SAACC,EAAOC,GAC5C,OAAQP,GACN,KAAKL,EACH,OAAOW,EAAMN,GAAcO,EAAMP,GAEnC,KAAKN,EACH,OAAOY,EAAME,cAAcD,GAC7B,QACE,OAAO,OAKXH,IACFF,EAAe,YAAIA,GAAcH,WAG5BG,EAScO,CACnBhB,EACAO,EAAWF,OACXE,EAAWU,UAIb,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYb,EAAWF,SAAWJ,IAEtCoB,QAAS,kBAAMb,EAAc,2BACxBD,GADuB,IAE1BF,OAAQJ,MATZ,iCAeA,wBACEkB,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYb,EAAWF,SAAWH,IAEtCmB,QAAS,kBAAMb,EAAc,2BACxBD,GADuB,IAE1BF,OAAQH,MATZ,4BAeA,wBACEiB,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAab,EAAWD,UAE5Be,QAAS,kBAAMb,EAAc,2BACxBD,GADuB,IAE1BU,UAAWV,EAAWU,aAT1B,qBAcCR,IAAiBT,GAChB,wBACEmB,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAAMb,EAAc,CAC3BH,OAAQ,GACRY,UAAU,KALd,sBAcJ,6BACGR,EAAaa,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCzHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d8377082.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_NAME = 'name';\nconst SORT_FIELD_LENGTH = 'length';\n\nconst getVisbleGoods = (goods, sortOption, isReversed) => {\n  let visibleGoods = goods;\n\n  if (sortOption) {\n    visibleGoods = [...visibleGoods].sort((good1, good2) => {\n      switch (sortOption) {\n        case SORT_FIELD_LENGTH:\n          return good1[sortOption] - good2[sortOption];\n\n        case SORT_FIELD_NAME:\n          return good1.localeCompare(good2);\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods = [...visibleGoods].reverse();\n  }\n\n  return visibleGoods;\n};\n\nexport const App = () => {\n  const [sortOption, setSortOption] = useState({\n    option: '',\n    reverse: false,\n  });\n\n  const visibleGoods = getVisbleGoods(\n    goodsFromServer,\n    sortOption.option,\n    sortOption.reversed,\n\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortOption.option !== SORT_FIELD_NAME },\n          )}\n          onClick={() => setSortOption({\n            ...sortOption,\n            option: SORT_FIELD_NAME,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortOption.option !== SORT_FIELD_LENGTH },\n          )}\n          onClick={() => setSortOption({\n            ...sortOption,\n            option: SORT_FIELD_LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !sortOption.reverse },\n          )}\n          onClick={() => setSortOption({\n            ...sortOption,\n            reversed: !sortOption.reversed,\n          })}\n        >\n          Reverse\n        </button>\n        {visibleGoods !== goodsFromServer && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => setSortOption({\n              option: '',\n              reversed: false,\n            })}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}